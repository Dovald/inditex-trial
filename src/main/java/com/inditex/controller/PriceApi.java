/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.43).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.inditex.controller;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.inditex.dto.PriceDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-06-05T17:43:06.231643+02:00[Europe/Madrid]")
@Validated
public interface PriceApi {

    @Operation(summary = "Get the price of a product by Id", description = "", tags={ "Prices" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PriceDTO.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Product not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/price/{productId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PriceDTO> getPrice(@Parameter(in = ParameterIn.PATH, description = "Id of product", required=true, schema=@Schema()) @PathVariable("productId") Long productId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Date when the price applies" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "date", required = true) String date, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Brand of the group where the price applies" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "brandId", required = true) Integer brandId);

}

